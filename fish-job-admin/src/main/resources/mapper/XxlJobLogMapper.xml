<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xxl.job.admin.dao.XxlJobLogDao">
	
	<resultMap id="XxlJobLog" type="com.xxl.job.admin.core.model.XxlJobLog" >
		<result column="id" property="id" />

		<result column="job_group" property="jobGroup" />
		<result column="job_id" property="jobId" />

		<result column="executor_address" property="executorAddress" />
		<result column="executor_handler" property="executorHandler" />
	    <result column="executor_param" property="executorParam" />
		<result column="executor_sharding_param" property="executorShardingParam" />
		<result column="executor_fail_retry_count" property="executorFailRetryCount" />
	    
	    <result column="trigger_time" property="triggerTime" />
	    <result column="trigger_code" property="triggerCode" />
	    <result column="trigger_msg" property="triggerMsg" />
	    
	    <result column="handle_time" property="handleTime" />
	    <result column="handle_code" property="handleCode" />
	    <result column="handle_msg" property="handleMsg" />

		<result column="alarm_status" property="alarmStatus" />
	</resultMap>

	<sql id="Base_Column_List">
		t.id,
		t.job_group,
		t.job_id,
		t.executor_address,
		t.executor_handler,
		t.executor_param,
		t.executor_sharding_param,
		t.executor_fail_retry_count,
		t.trigger_time,
		t.trigger_code,
		t.trigger_msg,
		t.handle_time,
		t.handle_code,
		t.handle_msg,
		t.alarm_status
	</sql>
	
	<select id="pageList" resultMap="XxlJobLog">
		select <include refid="Base_Column_List" />
		from xxl_job_log as t
		<trim prefix="where" prefixOverrides="and | or" >
			<if test="jobId==0 and jobGroup gt 0">
				and t.job_group = #{jobGroup}
			</if>
			<if test="jobId gt 0">
				and t.job_id = #{jobId}
			</if>
			<if test="triggerTimeStart != null">
				and t.trigger_time <![CDATA[ >= ]]> #{triggerTimeStart}
			</if>
			<if test="triggerTimeEnd != null">
				and t.trigger_time <![CDATA[ <= ]]> #{triggerTimeEnd}
			</if>
			<if test="logStatus == 1" >
				and t.handle_code = 200
			</if>
			<if test="logStatus == 2" >
				and (
					t.trigger_code not in (0, 200) or
					t.handle_code not in (0, 200)
				)
			</if>
			<if test="logStatus == 3" >
				and t.trigger_code = 200
				and t.handle_code = 0
			</if>
		</trim>
		order by t.trigger_time desc
		limit #{pagesize} offset #{offset}
	</select>
	
	<select id="pageListCount" resultType="int">
		select count(1)
		from xxl_job_log as t
		<trim prefix="where" prefixOverrides="and | or" >
			<if test="jobId==0 and jobGroup gt 0">
				and t.job_group = #{jobGroup}
			</if>
			<if test="jobId gt 0">
				and t.job_id = #{jobId}
			</if>
			<if test="triggerTimeStart != null">
				and t.trigger_time <![CDATA[ >= ]]> #{triggerTimeStart}
			</if>
			<if test="triggerTimeEnd != null">
				and t.trigger_time <![CDATA[ <= ]]> #{triggerTimeEnd}
			</if>
			<if test="logStatus == 1" >
				and t.handle_code = 200
			</if>
			<if test="logStatus == 2" >
				and (
					t.trigger_code not in (0, 200) or
					t.handle_code not in (0, 200)
				)
			</if>
			<if test="logStatus == 3" >
				and t.trigger_code = 200
				and t.handle_code = 0
			</if>
		</trim>
	</select>
	
	<select id="load" parameterType="java.lang.Long" resultMap="XxlJobLog">
		select <include refid="Base_Column_List" />
		from xxl_job_log as t
		where t.id = #{id}
	</select>

	
	<insert id="save" parameterType="com.xxl.job.admin.core.model.XxlJobLog" useGeneratedKeys="true" keyProperty="id" >
		insert into xxl_job_log (
			job_group,
			job_id,
			trigger_time,
			trigger_code,
			handle_code
		) values (
			#{jobGroup},
			#{jobId},
			#{triggerTime},
			#{triggerCode},
			#{handleCode}
		)
		
	</insert>

	<update id="updateTriggerInfo" >
		update xxl_job_log
		set trigger_time = #{triggerTime},
			trigger_code = #{triggerCode},
			trigger_msg = #{triggerMsg},
			executor_address = #{executorAddress},
			executor_handler = #{executorHandler},
			executor_param = #{executorParam},
			executor_sharding_param = #{executorShardingParam},
			executor_fail_retry_count = #{executorFailRetryCount}
		where id = #{id}
	</update>

	<update id="updateHandleInfo">
		update xxl_job_log
		set handle_time= #{handleTime},
			handle_code= #{handleCode},
			handle_msg= #{handleMsg}
		where id = #{id}
	</update>
	
	<delete id="delete" >
		delete from xxl_job_log
		where job_id = #{jobId}
	</delete>


    <select id="findLogReport" resultType="java.util.Map" >
		select
			count(handle_code) triggerDayCount,
			sum(case when (trigger_code in (0, 200) and handle_code = 0) then 1 else 0 end) as triggerDayCountRunning,
			sum(case when handle_code = 200 then 1 else 0 end) as triggerDayCountSuc
		from xxl_job_log
		where trigger_time between #{from} and #{to}
    </select>

	<select id="findClearLogIds" resultType="long" >
		select id from xxl_job_log
		<trim prefix="where" prefixOverrides="and | or">
			<if test="jobGroup gt 0">
				and job_group = #{jobGroup}
			</if>
			<if test="jobId gt 0">
				and job_id = #{jobId}
			</if>
			<if test="clearBeforeTime != null">
				and trigger_time &lt;= #{clearBeforeTime}
			</if>
			<if test="clearBeforeNum gt 0">
				and id not in(
				select id from(
				select id from xxl_job_log as t
				<trim prefix="where" prefixOverrides="and | or">
					<if test="jobGroup gt 0">
						and t.job_group = #{jobGroup}
					</if>
					<if test="jobId gt 0">
						and t.job_id = #{jobId}
					</if>
				</trim>
				order by t.trigger_time desc
				limit 0, #{clearBeforeNum}
				) as t1
				)
			</if>
		</trim>
		order by id asc
		limit #{pagesize}
	</select>

	<delete id="clearLog" >
		delete from xxl_job_log
		where id in
		<foreach collection="logIds" item="item" open="(" close=")" separator="," >
			#{item}
		</foreach>
	</delete>

	<select id="findFailJobLogIds" resultType="java.lang.Long" >
		select id from xxl_job_log
		where (
			(trigger_code in (0, 200) and handle_code = 0)
			or
			(handle_code = 200)
		) = false
		and alarm_status = 0
		order by id
		limit #{pagesize}
	</select>

	<update id="updateAlarmStatus" >
		update xxl_job_log
		set alarm_status = #{newAlarmStatus}
		where id= #{logId} and alarm_status = #{oldAlarmStatus}
	</update>

	<select id="findLostJobIds" resultType="java.lang.Long" >
		select t.id
		from xxl_job_log t
				 left join xxl_job_registry t2 on t.executor_address = t2.registry_value
		where t.trigger_code = 200
		  and t.handle_code = 0
		  and t.trigger_time &lt;= #{losedTime}
		  and t2.id is null
	</select>

</mapper>
